10/20/2024 02:13:39 ==> Creating a connection between MySQL and Python
10/20/2024 02:13:39 ==> Connection established between MySQL and Python
10/20/2024 02:13:39 ==> Creating first cursor object from connection
10/20/2024 02:13:39 ==> Cursor object created to communicate with MySQL
10/20/2024 02:13:39 ==> Dropping Database db_window_fxn if it already exists.
10/20/2024 02:13:39 ==> Creating Database db_window_fxn.
10/20/2024 02:13:39 ==> db_window_fxn Database created.
10/20/2024 02:13:39 ==> Database 'db_window_fxn' was successfully created.
10/20/2024 02:13:39 ==> Database 'db_window_fxn' set for use.
10/20/2024 02:13:39 ==> tbl_orders table created.
10/20/2024 02:13:40 ==> tbl_orders table created.
10/20/2024 02:13:40 ==> tbl_products table created.
10/20/2024 02:13:40 ==> tbl_customers table created.
10/20/2024 02:13:40 ==> tbl_employees table created.
10/20/2024 02:13:40 ==> Executing the query: SELECT * FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT * FROM tbl_products;
10/20/2024 02:13:40 ==> Executing the query: SELECT * FROM tbl_customers;
10/20/2024 02:13:40 ==> Executing the query: SELECT * FROM tbl_employees;
10/20/2024 02:13:40 ==> Executing the query: SELECT SUM(Sales) AS TotalSales FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT productid, SUM(sales) AS TotalSales FROM tbl_orders GROUP BY productid;
10/20/2024 02:13:40 ==> Executing the query: SELECT OrderID, OrderDate, ProductID, SUM(Sales) AS TotalSales FROM tbl_orders GROUP BY OrderID, OrderDate, ProductID;
10/20/2024 02:13:40 ==> Executing the query: SELECT SUM(Sales) OVER() AS TotalSales FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT SUM(Sales) OVER(PARTITION BY productid) AS TotalSalesByProduct FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, SUM(Sales) OVER(PARTITION BY productid) AS TotalSalesByProduct FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER() AS TotalSales,
SUM(Sales) OVER(PARTITION BY productid) AS TotalSalesByProduct, 
SUM(Sales) OVER(PARTITION BY productid, orderstatus) AS TotalSalesByProductsAndStatus 
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, sales, productid, orderstatus,
SUM(Sales) OVER(PARTITION BY productid, orderstatus) AS TotalSalesByProductsAndStatus 
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
RANK() OVER(ORDER BY sales DESC) AS RankSales
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY ProductID ORDER BY orderdate ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalSalesByProduct
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY orderstatus ORDER BY orderdate ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS TotalSalesByOrderStatus
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY ProductID ORDER BY orderdate ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS TotalSalesByProduct
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY orderstatus ORDER BY orderdate ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalSales
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY orderstatus ORDER BY orderdate ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalSales
FROM tbl_orders WHERE orderstatus = 'Shipped';
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY orderstatus ORDER BY orderdate ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalSales
FROM tbl_orders WHERE orderstatus = 'Delivered';
10/20/2024 02:13:40 ==> Executing the query: SELECT orderid, orderdate, productid, sales, orderstatus,
SUM(sales) OVER(PARTITION BY orderstatus) AS TotalSales
FROM tbl_orders
ORDER BY SUM(sales) OVER(PARTITION BY orderstatus);
10/20/2024 02:13:40 ==> Executing the query: SELECT * FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT customerid, 
SUM(Sales) AS TotalSalesByCustomer,
RANK() OVER(Order By SUM(Sales) DESC) AS RankCustomersBySales 
FROM tbl_orders
GROUP BY customerid;
10/20/2024 02:13:40 ==> Executing the query: SELECT customerid, orderid, orderdate, productid, sales, orderstatus,
RANK() OVER(ORDER BY sales DESC) AS RankSales
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT customerid, SUM(sales),
RANK() OVER(ORDER BY SUM(sales) DESC) AS RankCustomersBySales 
FROM tbl_orders
GROUP BY customerid;
10/20/2024 02:13:40 ==> Executing the query: SELECT customerid, SUM(sales)
FROM tbl_orders
GROUP BY customerid;
10/20/2024 02:13:40 ==> Executing the query: SELECT customerid, SUM(sales),
RANK() OVER(ORDER BY SUM(sales) DESC) AS RankCustomersBySales 
FROM tbl_orders
GROUP BY customerid;
10/20/2024 02:13:40 ==> Executing the query: SELECT orderstatus, COUNT(orderstatus) OVER (PARTITION BY orderstatus) AS CountOrderStatus
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT productid, COUNT(productid) OVER (PARTITION BY productid) AS CountProducts
FROM tbl_orders;
10/20/2024 02:13:40 ==> Executing the query: SELECT productid, COUNT(*) AS CountProducts
FROM tbl_orders
GROUP BY productid;
10/20/2024 02:13:41 ==> Executing the query: SELECT count(productid) AS CountProductID, COUNT(*) AS CountProducts
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, COUNT(*) OVER() AS TotalOrders
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate,
COUNT(*) OVER() AS TotalOrders,
customerid,
COUNT(*) OVER(PARTITION BY customerid) AS TotalOrdersByCustomers
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT *
FROM tbl_customers;
10/20/2024 02:13:41 ==> Executing the query: SELECT *, COUNT(*) OVER() AS TotalCustomers
FROM tbl_customers;
10/20/2024 02:13:41 ==> Executing the query: SELECT *, 
COUNT(*) OVER() AS TotalCustomers,
COUNT(score) OVER() AS TotalScores
FROM tbl_customers;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, 
COUNT(orderid) OVER(PARTITION BY orderid) AS CheckPrimaryKey
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, 
COUNT(orderid) OVER(PARTITION BY orderid) AS CheckPrimaryKey
FROM tbl_orders_archive;
10/20/2024 02:13:41 ==> Executing the query: 
SELECT * FROM 
(SELECT orderid, 
COUNT(orderid) OVER(PARTITION BY orderid) AS CheckPrimaryKey
FROM tbl_orders_archive) AS T
WHERE CheckPrimaryKey > 1;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, sales, productid, orderstatus,
SUM(sales) OVER(PARTITION BY productid) AS TotalSalesByProduct,
SUM(sales) OVER(PARTITION BY productid, orderstatus) AS TotalSalesByProductAndOrderStatus,
SUM(sales) OVER() AS TotalSales
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, sales, productid, orderstatus,
SUM(sales) OVER(PARTITION BY productid) AS TotalSalesByProduct,
SUM(sales) OVER(PARTITION BY productid, orderstatus) AS TotalSalesByProductAndOrderStatus,
SUM(sales) OVER() AS TotalSales,
(sales / SUM(sales) OVER()) * 100 AS PercentageContribution
FROM tbl_orders
ORDER BY PercentageContribution DESC;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, sales, productid, orderstatus,
ROUND(AVG(sales) OVER(), 2) AS AverageSales, 
ROUND(AVG(sales) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, sales, productid, orderstatus,
ROUND(AVG(COALESCE(sales, 0)) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT *,
SUM(score) OVER() AS TotalScore,
(SUM(score) OVER()) / COUNT(customerid) OVER() AS CalculatedAverageScore,
ROUND(AVG(score) OVER(), 2) AS AverageScoreWithNull,
ROUND(AVG(COALESCE(score, 0)) OVER(), 2) AS AverageScore
FROM tbl_customers;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, sales, productid, quantity FROM 
tbl_orders WHERE Sales > 
(SELECT ROUND(AVG(COALESCE(sales, 0)), 2) AS AverageSale FROM tbl_orders);
10/20/2024 02:13:41 ==> Executing the query: SELECT * FROM 
(SELECT orderid, sales, productid, quantity, ROUND(AVG(COALESCE(sales, 0)) OVER(), 2) AS AverageSale 
FROM tbl_orders) AS T
WHERE Sales > AverageSale;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
MIN(Sales) OVER() AS LowestSale,
MAX(Sales) OVER() AS HighestSale,
MIN(Sales) OVER(PARTITION BY productid) AS LowestProductSale,
MAX(Sales) OVER(PARTITION BY productid) AS HighestProductSale
FROM tbl_orders;
10/20/2024 02:13:41 ==> Executing the query: SELECT *, 
MAX(salary) OVER() AS HighestSalary
FROM tbl_employees;
10/20/2024 02:13:41 ==> Executing the query: SELECT * FROM 
tbl_employees
WHERE Salary = (SELECT MAX(salary) FROM tbl_employees);
10/20/2024 02:13:41 ==> Executing the query: SELECT * FROM 
(SELECT *, MAX(salary) OVER() AS HighestSalary
FROM tbl_employees) AS T
WHERE salary = highestsalary;
10/20/2024 02:13:41 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
MIN(Sales) OVER() AS LowestSale,
MAX(Sales) OVER() AS HighestSale,
Sales - MIN(Sales) OVER() AS DeviationFromMin,
MAX(Sales) OVER() - Sales AS DeviationFromMax
FROM tbl_orders;
10/20/2024 02:13:41 ==> NumExpr defaulting to 8 threads.
10/20/2024 02:13:42 ==> Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
10/20/2024 02:13:42 ==> Creating converter from 7 to 5
10/20/2024 02:13:42 ==> Creating converter from 5 to 7
10/20/2024 02:13:42 ==> Creating converter from 7 to 5
10/20/2024 02:13:42 ==> Creating converter from 5 to 7
10/20/2024 02:16:00 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales
FROM tbl_orders;
10/20/2024 02:17:03 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
AVG(Sales) OVER(PARTITION BY productid) AS AverageSalesByProduct
FROM tbl_orders;
10/20/2024 02:17:19 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
ROUND(AVG(Sales) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct
FROM tbl_orders;
10/20/2024 02:17:38 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
ROUND(AVG(Sales) OVER(PARTITION BY productid), 0) AS AverageSalesByProduct
FROM tbl_orders;
10/20/2024 02:17:45 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
ROUND(AVG(Sales) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct
FROM tbl_orders;
10/20/2024 02:18:39 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
ROUND(AVG(Sales) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct,
ROUND(AVG(Sales) OVER(PARTITION BY productid ORDER BY orderdate ASC), 2) AS MovingAverage
FROM tbl_orders;
10/20/2024 02:22:09 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
ROUND(AVG(Sales) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct,
ROUND(AVG(Sales) OVER(PARTITION BY productid ORDER BY orderdate ASC ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), 2) AS MovingAverage
FROM tbl_orders;
10/20/2024 02:24:46 ==> Executing the query: SELECT orderid, orderdate, orderstatus, productid, quantity,sales,
ROUND(AVG(Sales) OVER(PARTITION BY productid), 2) AS AverageSalesByProduct,
ROUND(AVG(Sales) OVER(PARTITION BY productid ORDER BY orderdate ASC ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), 2) AS RollingAverage
FROM tbl_orders;
